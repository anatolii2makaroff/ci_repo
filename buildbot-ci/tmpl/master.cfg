# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

_PARAMS = {"port":BB_PORT,
           "git_source":"BB_SOURCE",
           "git_group":"BB_GROUP",
           "git_repo":"BB_NAME",
           "http_port":BB_HTPP_PORT
           }

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

c['slaves'] = [buildslave.BuildSlave("master", "master!")]
c['slaves'].append(buildslave.BuildSlave("dev", "dev!"))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': _PARAMS["port"]}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        _PARAMS["git_source"],
        workdir='git-workdir', branches=['master',"develop"],
        pollinterval=60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runbuild"]))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all_dev",
                            change_filter=util.ChangeFilter(branch='develop'),
                            treeStableTimer=None,
                            builderNames=["runbuild_dev"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runbuild", "runbuild_dev"]))



####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["./build_rpm",
                                            _PARAMS["git_group"],
                                            _PARAMS["git_repo"],
                                            "master",
                                            "0.1.0"],
                                  workdir="/home/rpmbuild/rpmbuild/"
))

factory_dev = util.BuildFactory()
factory_dev.addStep(steps.ShellCommand(command=["./build_rpm",
                                            _PARAMS["git_group"],
                                            _PARAMS["git_repo"],
                                            "develop",
                                            "0.1.0"],
                                  workdir="/home/rpmbuild/rpmbuild/"
))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runbuild",
      slavenames=["master"],
      factory=factory))

c['builders'].append(
    util.BuilderConfig(name="runbuild_dev",
      slavenames=["dev"],
      factory=factory_dev))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("admin","admin123")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=_PARAMS["http_port"], authz=authz_cfg))



####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = _PARAMS["git_repo"]
c['titleURL'] = _PARAMS["git_source"]


# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:{}/".format(_PARAMS["http_port"])

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

